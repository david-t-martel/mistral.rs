server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /positions/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push
    tenant_id: mistralrs
    backoff_config:
      min_period: 500ms
      max_period: 5s
      max_retries: 5

scrape_configs:
  # mistral.rs application logs
  - job_name: mistralrs
    static_configs:
      - targets:
          - localhost
        labels:
          job: mistralrs
          service: mistralrs
          environment: production
          __path__: /var/log/mistralrs/*.log

    pipeline_stages:
      # Parse JSON logs
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            module: module
            request_id: request_id
            endpoint: endpoint
            method: method
            status_code: status_code
            latency_ms: latency_ms
            error: error
            mcp_server: mcp_server
            tool_name: tool_name
            memory_mb: memory_mb
            cpu_percent: cpu_percent

      # Set timestamp from log
      - timestamp:
          source: timestamp
          format: RFC3339
          fallback_formats:
            - UnixMs
            - Unix

      # Set severity label based on level
      - template:
          source: severity
          template: |
            {{if eq .level "ERROR"}}error{{else if eq .level "WARN"}}warning{{else if eq .level "INFO"}}info{{else if eq .level "DEBUG"}}debug{{else}}trace{{end}}

      # Add labels from parsed fields
      - labels:
          level:
          module:
          endpoint:
          method:
          mcp_server:
          tool_name:
          severity:

      # Drop debug/trace logs in production
      - match:
          selector: '{level=~"DEBUG|TRACE"}'
          stages:
            - drop:
                longer_than: 0

      # Extract metrics from logs
      - metrics:
          log_lines_total:
            type: Counter
            description: "Total number of log lines"
            source: level
            config:
              action: inc

          request_duration:
            type: Histogram
            description: "Request duration in milliseconds"
            source: latency_ms
            config:
              buckets: [10, 50, 100, 200, 500, 1000, 2000, 5000]

          error_count:
            type: Counter
            description: "Total number of errors"
            source: error
            config:
              action: inc
              match_all: true
              count_entry_bytes: false

      # Filter out health check logs
      - match:
          selector: '{endpoint="/health"}'
          stages:
            - drop:
                longer_than: 0

      # Rate limit logs
      - limit:
          rate: 100
          burst: 200

  # System logs
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: system
          __path__: /var/log/syslog

    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\w+ \d+ \d+:\d+:\d+) (?P<hostname>\S+) (?P<service>\S+?)(?:\[(?P<pid>\d+)\])?:\s+(?P<message>.*)'

      - timestamp:
          source: timestamp
          format: 'Jan 2 15:04:05'

      - labels:
          hostname:
          service:

      # Only keep mistralrs-related system logs
      - match:
          selector: '{service!~"mistralrs.*"}'
          stages:
            - drop:
                longer_than: 0

  # Docker container logs (if running in Docker)
  - job_name: docker
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["monitoring=true"]

    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        target_label: container_name
      - source_labels: ['__meta_docker_container_id']
        target_label: container_id
      - source_labels: ['__meta_docker_container_image']
        target_label: image

    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time

      - timestamp:
          source: time
          format: RFC3339Nano

      - labels:
          stream:

      - output:
          source: output
