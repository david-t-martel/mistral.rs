on: 
  schedule:
      - cron: '0 0 * * 1'
  push:
    branches: 
      - master
  pull_request:
    branches: 
      - master
  workflow_dispatch:

name: Continuous integration

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Quick syntax and format checks (fail fast)
  quick-check:
    name: Quick Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --workspace --all-targets -- -D warnings

  # Full check across platforms
  check:
    name: Check
    runs-on: ${{ matrix.os }}
    needs: quick-check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-check
      
      - name: Run cargo check
        run: cargo check --workspace --all-targets --all-features

  # Comprehensive test suite
  test:
    name: Test Suite (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: quick-check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-test
      
      - name: Run workspace tests
        env:
          TESTS_HF_TOKEN: ${{ secrets.HF_TOKEN }}
          RUST_TEST_THREADS: 4
        run: |
          cargo test --workspace --all-features -- --nocapture --test-threads=4
      
      - name: Run doc tests
        run: cargo test --workspace --doc

  # Code coverage (Linux only for speed)
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: quick-check
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: coverage
      
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      
      - name: Generate coverage data
        env:
          TESTS_HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # Documentation build check
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: quick-check
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: docs
      
      - name: Build documentation
        env:
          RUSTDOCFLAGS: "-D warnings"
        run: cargo doc --workspace --all-features --no-deps

  # Spell checking
  typos:
    name: Typos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for typos
        uses: crate-ci/typos@master
        with:
          config: .typos.toml

  # MSRV (Minimum Supported Rust Version) check
  msrv:
    name: MSRV Check (1.86)
    runs-on: ubuntu-latest
    needs: quick-check
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust MSRV toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.86.0"
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: msrv
      
      - name: Check with MSRV
        run: cargo check --workspace --all-features

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run cargo-audit
        uses: rustsec/audit-check@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Integration tests (if tests/ directory has integration tests)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [check, test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: integration
      
      - name: Run integration tests
        env:
          TESTS_HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          if [ -d "tests" ]; then
            cargo test --test '*' --all-features
          else
            echo "No integration tests found"
          fi

      - name: Run mistralrs-tui suite
        run: make test-tui

  # Final gate: all checks must pass
  ci-complete:
    name: CI Complete
    runs-on: ubuntu-latest
    needs: [quick-check, check, test, coverage, docs, typos, msrv, security-audit, integration]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.quick-check.result }}" != "success" ]] || \
             [[ "${{ needs.check.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.docs.result }}" != "success" ]] || \
             [[ "${{ needs.typos.result }}" != "success" ]] || \
             [[ "${{ needs.msrv.result }}" != "success" ]]; then
            echo "One or more required checks failed"
            exit 1
          fi
          echo "All required checks passed!"
